问答题
1. 常见的排序算法有哪7种？平均，最小，最大时间复杂度各是什么？


2. 希尔排序为什么要使用插入排序作为每一轮的排序算法？它和插入排序有什么区别？
希尔排序是基于插入排序的以下两点性质而提出改进方法的：
插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率。
但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位。

先取一个小于n的整数d1作为第一个增量，把文件的全部记录分组。
所有距离为d1的倍数的记录放在同一个组中。先在各组内进行直接插入排序；然后，取第二个增量d2 =1(    …


3. 快速排序算法流程是什么？什么时候会达成最差时间复杂度？
将一个数组分成两个数组排序，分别排序再合并。和归并不同的是，快排能直接合并。
当每次选择的切分点都是第一个或者最后一个的时候会达成最差时间复杂度。


代码题
```
const cmp = (a, b) => {
    if (a == b) return 0;
    else if (a < b) return -1;
    else if (a > b) return 1;
  }
  
  const swap = (arr, i, j) => {
    let temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }
```
1. 请实现冒泡排序
```
const bubble = (arr, cmp, swap) => {
    for (let i = 0, l = arr.length; i < l; i++) {
        for (let j = 0; j < l - i - 1; j++) {
            if (cmp(arr[j], arr[j + 1]) === 1) {
                swap(arr, j, j + 1)
            }
        }
    }
    return arr;
}
```
2. 请实现插入排序

```
 const insertSort = (arr, cmp, swap) => {
    for (let i = 1; i < arr.length; i++) {
      for (let j = i; j > 0, cmp(arr[j], arr[j - 1]) == -1; j--) {
        swap(arr, j, j - 1)
      }
    }
  }

```
3. 请实现选择排序


```
  const selectSort = (arr, cmp, swap) => {
    for (let i = 0; i < arr.length; i++) {
      let min = i
      for (let j = i; j < arr.length; j++) {
        if (cmp(arr[min], arr[j]) === 1) min = j
      }
      swap(arr, i, min)
    }
  }
```
4. 请自学并实现希尔排序

```

```
5. 请实现快速排序
```
 const quickSort3way = (arr, cmp, swap) => {
    shuffle();
    sort(0, arr.length - 1);
  
    function shuffle() {
      let N = arr.length;
      let r;
      for (let i = 0; i < N; i++) {
        r = parseInt(Math.random() * N)
        swap(arr, i, r);
      }
    }
  
    function sort(lo, hi) {
      if (hi <= lo) return;
      let i = lo, j = hi + 1;
      let p = lo, q = hi + 1;
      let v = arr[lo];
  
      while (true) {
        while (cmp(arr[++i], v) === -1) if (i == hi) break;
        while (cmp(arr[--j], v) === 1) if (j == lo) break;
  
        if (i == j && cmp(arr[i], v) === 0) swap(arr, ++p, i);
        if (i >= j) break;
        swap(arr, i, j);
        if (cmp(arr[i], v) === 0) swap(arr, ++p, i)
        if (cmp(arr[j], v) === 0) swap(arr, --q, j)
      }
      i = j + 1;//防备i=j的情况
      for (let k = lo; k <= p; k++) swap(arr, k, j--);
      for (let k = hi; k >= q; k--) swap(arr, k, i++);
  
      sort(lo, j);
      sort(i, hi);
    }
  }
```