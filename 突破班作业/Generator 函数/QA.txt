问答题
1. 什么是 Generator 函数？和普通函数有什么区别？怎么声明 Generator 函数？
Generator 函数是 ES6 提供的一种异步编程解决方案。
语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。
执行 Generator 函数会返回一个遍历器对象。

和普通函数的区别在于Generator函数可以执行到一半退出，等到合适的时候再执行。而且可以和外部进行多次的数据互相传递。

声明的时候在function和函数名之间加一个*号，
如:
```
function *helloWorld() {
    yield "Hello "
    yield "world "
    yield "."
}

```

2. 怎样调用 Generator 函数并逐步执行 Generator 代码？
用一个变量储存 Generatro 函数执行后返回的的迭代器。
然后用迭代器每执行一次，就等于执行了一步。

3. Generator 函数实现无限序列原理是什么？
写一个死循环，每执行一次循环，yield一次。

4. Generator 函数怎么实现函数内的数据与函数外进行交互的？请从函数内数据传至函数外，和函数外数据传至函数内 两个方面说明

[函数外传到函数内的变量] = yield [函数内传到函数外的变量]

个人感觉可以把 =yield 看做一个整体，是特殊的操作符，它对左边等同于赋值号，对右边像return。


5. yield*有什么用？它和 yield 有什么关系？（此题请自学完成）
yield* 可以用来在一个 Generator 函数里面执行另一个 Generator 函数。

事实它就是在yield后面加一个*，表明返回的是一个迭代器对象，需要特殊处理，即yield会进入那个迭代器对象处理。

6. 怎么迭代出Generator 函数所有值？请使用 for of 循环实现

let itr = Generator()
for (let value of itr) {
    //using value ...
}



代码题
1. 请实现 Generator 函数 range(start,end)，可以迭代出start到end直接所有整数
```
function* range(start, end) {
    for (let i = start; i <= end; i++) {
        yield i;
    }
}

let rangeIt = range(1,10);
for(let value of rangeIt) {
    console.log(value)
}
```

2. 请实现 Generator 函数 fib()，实现计算无限序列：斐波那契数列
```
function* fib() {
    [a1, a2] = [1, 1]
    while (1) {
        yield a1;
        [a1, a2] = [a2, a1 + a2]
    }
}
```


3. 请使用解构语法，使用上面实现的 fib() 函数计算斐波那契数列前 3 项
```
function* fib() {
    let [a1, a2] = [1, 1]
    while (1) {
        yield a1;
        [a1, a2] = [a2, a1 + a2]
    }
}

[a1, a2, a3] = fib();
console.log(a1, a2, a3) //1,1,2
```