问答题：
1. 为什么要使用 generator 函数 或者 async/await 进行异步控制流，对比 callback 和 Promise 方案，主要解决了什么问题？
为了解决JS用事件+回调函数的机制满足异步操作，导致异步操作多了以后，代码横向发展，嵌套层数太多，导致难以调试和阅读。
Promise虽然能够解决回调地狱的问题，但是代码过于冗长。


2. generator 函数为什么能实现异步控制流？其原理是什么？
因为要实现异步控制流，且让它和同步流写法类似。

而这要求必须做到执行到异步操作的时候，停下函数的执行，等待异步操作完成；而等异步操作完成之后，又能重新开始执行。

而 Generator 函数能很好地满足这个要求。
它每次代码运行到 yield 右侧或者 return 结束，而只要在外部利用迭代器 next 一下就能继续执行到 yield 或者 return。


3. 什么是 Thunk 函数？为什么使用 Thunk 函数可以通过和 generator 函数配合实现异步控制流？
Thunk 函数需要输入两次参数的函数。第一次输入除了回调函数之外的所有参数，第二次输入回调函数。

在说我的理解之前，我想说一句“废话”和目标。

“废话”：JS实现异步编程最基本的方法是使用回调函数。（换话说，使用回调也往往是为了实现异步编程，同步编程往往不需要回调函数。）
目标：实现异步控制流————像写同步编程那样进行异步编程。 （将回调函数从异步控制流中剥离，从而避免回调地狱）

以下为 Thunk 函数与 generator 函数如何配合实现异步控制流的回答：

根据前面的目标，我们是想用同步的方式进行异步编程，也就是写成这样的形式：

let data = asynFun(arg1,arg2,callback) // 在执行到这条代码是能够正确获得数据

我们都知道，这样的函数一定会失败。

因为异步操作需要时间，而一般的同步流不会停止，它会继续向下执行，所以 data 里什么都没有。
以及异步操作完成的数据不是作为函数的返回值传出，而是在回调函数里。

但这给了我们方向。就是去解决那些让那行代码执行的和我们想要结果不太一样的原因。        

根据出错的原因，我们对应着做三件事：

一：执行到异步函数的停止，直到异步函数执行完成。
二：等异步函数执行完成之后，重新开始执行 
三：取得异步函数执行完成的结果，并赋给一个变量

generator 函数和 Thunk 函数配合正是做到这三件事，才实现了异步控制流。

接下来依次看它们是怎么做这三件事的。

第一件事，执行到异步函数停止。
这很简单， generator 写异步函数, 在执行到它时用 yield 关键字。
如：
```
yield asynFun(arg1,arg2,callback) 
```
或者
```
asynFun(arg1,arg2,callback) 
yield 
```

第二件事，在异步函数执行完成之后，我们需要知道，并且知道后要让 generator 函数重新开始执行。

这也不难，想要知道异步函数执行完成，只要通过异步函数的 callback 函数，因为异步操作一旦完成，它的回调函数就会被执行。
而想要让 generator 函数重新开始执行，只要在 generator 函数外使用 next 方法就行。
这两者结合起来，就是在异步函数的 callback 函数里调用 迭代器的 next 方法。

这就决定了 asynFun(arg1,arg2,callback) 应该写在 generator 函数之外，否则就无法设置 callback 函数 。

但回头看看我们解决第一件事情的两种写法，都和这有矛盾。
asynFun(arg1,arg2,callback) 不可能写两遍，让它既在 generator 函数内，又在 generator 函数外。

这时候就需要 Thunk 函数出场了。前面说到，Thunk 函数需要输入两次参数才能执行。

这等于它能出现在两个地方，这完美符合我们的需求：
第一次出现在 generator 函数内，配合 yield 关键字使用
第二次出现在 generator 函数外，配合 next 方法使用。

因而只需要将 asynFun 这个函数 Thunk 化就行。这并不难,可以写一个 Thunk 转换函数，将 asynFun 转化为 thunkAsynFun。

Thunk(fn) {
   return function() {
      var args = Array.prototype.call(arguments)
      return function(callback) {
         args.push(callback)
         return fn.apply(this,args)
      }
   }
}

let thunkAsynFun = Thunk(asynFun)

那第一件事，也就是 generator 函数应该写成：
yield thunkAsynFun(arg1, arg2)

相比之前，这样的形式也更漂亮，因为根据前面的"废话"，回调函数是异步编程的重要特征，将它剥离到外面，这样的代码就更像同步代码了。

外面的回调部分则是

let itr = gen()
let thunkAsynFunSec = itr.next().value //

thunkAsynFunSec((data,err)=>{
   itr.next()
})


三：取得结果并赋予一个变量。
也很简单，先在 generator 函数外第二次输入参数时连用 next 传回回调函数的 data 。  

再在 generator 函数内用一个变量接收 yield 收到的对应 next 的值。

function * gen() {
   // code
   let data1 = yield thunkAsynFun(arg1, arg2)
   // ···
}

目前为止，在 generator 函数里用同步的方式进行异步编程已经实现了。

但还有一点小小的问题,就是如果有 generator 里有多个异步函数时：

function * gen() {
   let data1 = yield thunkAsynFun1(arg1, arg2)
   // using data1

   let data2 = yield thunkAsynFun2(arg1, arg2)
   // using data2

   let data3 = yield thunkAsynFun3(arg1, arg2)
   // using data3

   // ···
}

generator 外的 next 可能会发生严重的嵌套，也就是回调地狱。

这是与上面 generator 对应的迭代器。

let itr = gen()

let thunkAsynFunSec = itr.next().value
thunkAsynFunSec((data)=>{
   thunkAsynFunSec = itr.next(data).value
   thunkAsynFunSec((data)=>{
      thunkAsynFunSec = itr.next(data).value
      thunkAsynFunSec((data)=>{
         thunkAsynFunSec = itr.next(data).value
      })
   })
})

但仔细观察一下，它和普通的回调地狱有着很大的区别，甚至可以说是本质上的区别————它里面所有的回调函数结构一模一样（如果不考虑层数的话）。
而在编程里，结构高度重复则意味着可以用函数简化它。

不难发现这大段嵌套的代码其实只做两件事，
一、从迭代器里取出设置了第一次参数的异步函数。
二、给异步函数的第二次调用设置回调函数。

然后就开始不断嵌套重复。

可以写一个 setCb 函数去做这两件事情，同时用迭代器的 done 属性解决层数的问题。

function setCb(data) {
   let result = itr.next(data);
   if(!result.done)
      result.value(setCb)
}

这样书写的形式很像递归，但不是递归。
因为按照递归的定义————递归函数是自己调用了自己的函数————setCb并没有调用自己，它是由异步函数调用的。
它只是把自己设置成了 下一个异步函数的第二次调用 的回调函数。

这感觉上更像一条链条。在当前节点执行完成后，检测下一个节点是否存在，如果有，那么就再设置自己为它的回调函数。

打个比喻就是链条节点的自动连接器。

最后结合前面的代码封装一下，就能将 generator 外的操作自动化。

function run() {
   let itr = gen()
   function setCb(data) {
      let result
   }
   setCb()
}

run()


4. 使用 Promise 可以配合 generator 函数实现异步控制流吗？具体原理是什么？

用Promise 配合




5. 真正发出异步操作指令是在 generator 函数外还是在 generator 函数内？（hint: 基于 Thunk 函数和基于 Promise 两种 generator 函数异步控制流，情况不一样）



6. async 函数是什么？它和 generator 函数有什么关系？



7. 在全局域或者普通函数中能使用 await 或 yield 关键字吗？为什么？
不能。


8. 直接调用 async 函数的返回值类型是什么？为什么？
返回值的内容是Promise。


9. 下面代码能正常捕获异步异常吗？为什么？如果不能需要怎样修改才可以正常捕获异常？
```
async function f() {
   throw new Error('出错了');
}
try{
   f()
}catch(e){
   console.log(e)
}
```

代码题：
1. 请实现 thunkify(fn) 函数，它将一个 callback 类型的异步调用函数转换为 Thunk 函数


2. 请将 fs.readFile(path[, options], callback) 函数 Thunk 化，了解函数点击这里


3. 请实现基于 Thunk 函数的 generator 函数自动运行器


4. 请实现基于 Promise 的 generator 函数自动运行器


5. 请使用之前作业：Promise 实现的 ajaxGet(url) 使用 generator 函数实现以下异步控制流


6. 实现串行（一个接一个的）发送10个请求，来获取前10页数据


7. 实现并行（同时）发送10个请求，来获取前10页数据


8. 请使用之前作业：Promise 实现的 ajaxGet(url) 使用 async/await 实现以下异步控制流
   实现串行（一个接一个的）发送10个请求，来获取前10页数据
   实现并行（同时）发送10个请求，来获取前10页数据


源码阅读题:
此题为选做题，请阅读 co 源码，必要的地方加上注释。请将你标注的代码提交，并写一个文档介绍这个包的原理

此包的源码可以在 https://github.com/tj/co 获得