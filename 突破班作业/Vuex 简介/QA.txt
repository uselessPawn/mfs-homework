问答题

1. 什么是 Vuex？我们为什么要使用 Vuex？
Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。
它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。
Vuex 也集成到 Vue 的官方调试工具 devtools extension (opens new window)，
提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。



当组件树层级比较高的时候，低层级的组件与高层级的组件传递消息的时候会很复杂，而且很容易出错。
并且对于兄弟组件间的状态传递无能为力

使用Vuex,类似使用了全局变量，并且它有规范的读取和写的方法，使得Vuex很好维护。


2. Vuex 是如何管理状态的？
Vuex 将所有组件共享的数据用单例模式的实现为 Vuex。
所有需要使用这些共享数据的组件则通过 commit 和 mutation 来调用 Vuex 中的方法。
Vuex，而且还 从而保证共享数据的安全和实时更新。


3. 父子组件通信可以通过 props/event ；也可以使用组件共享状态；二者有什么不同？
使用 props/event 只能逐级传递；

共享状态能够


4. Vuex 有哪些核心概念？各有什么作用？
State
Vuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。
至此它便作为一个“唯一数据源 (SSOT (opens new window))”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。
可以简单地理解成别共享的数据。

Getter
Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。
就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。

Mutation
更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。
Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。
这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：

Action
Action 类似于 mutation，不同在于：

Action 提交的是 mutation，而不是直接变更状态。
Action 可以包含任意异步操作。

由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。
当应用变得非常复杂时，store 对象就有可能变得相当臃肿。

为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。
每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：

代码题
请 Vuex 重构之前实现的 TodoMVC

