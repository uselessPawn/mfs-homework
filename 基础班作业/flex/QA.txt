问答题：
1. 当父元素设置为 display: flex 时，子元素的摆放方式更像 display: block 还是 display: inline？请解释为什么。
更像是display: inline，因为子元素可以设置宽高并且可以让多个子元素排在一行。


2. flexbox 有哪两个轴？他们的方向可以改变吗？如果可以改变，通过设置什么属性可以改变？
主轴(main axis)和交叉轴(corss axis)。
他们的方向可以改变。
flex-direction属性决定主轴的方向。
row：主轴变为从左到右的轴，row-reverse：主轴变为从右到左的轴。
column：主轴变为从上到下的轴，column-reverse：主轴变为从下到上的轴。

3. 有哪些属性可以设置在 container 上的？他们分别有哪些属性？分别代表什么意思
flex-direction: 主轴方向。
可以取
row：主轴从左到右
row-reverse：主轴从右到左
column：主轴从上到下
column-reverse：主轴从下到上
------------------------------------------------------------------------
flex-wrap：换行方式。即当主轴的空间不够时，该采取的操作
可以取
nowrap：不换行，进行压缩
wrap：换行，且新的一行顺着主轴方向
wrap-reverse：换行，且新的一行逆着主轴方向
------------------------------------------------------------------------
flex-flow：上面两个属性的缩写，取值是两者的排列组合
------------------------------------------------------------------------
justify-content：定义了在主轴上的对齐方式：
flex-start: 向主轴开始位置集中
flex-end: 向主轴结束位置集中
center: 主轴中线集中
space-between: 剩余空间均匀分布在items之间，不包括两侧
space-around: 剩余空间均匀分布在items之间，包括两侧
------------------------------------------------------------------------
align-items: 属性定义了项目在交叉轴上如何对齐(看上去多应用与单行,多行的时候会失效)
flex-start: 以交叉轴开始对齐
flex-end: 以交叉轴结束对齐
center: 以交叉轴中线对齐
baseline: 以字体为基线对齐
stretch: 拉伸直至填满剩余空间（默认值）

------------------------------------------------------------------------
align-content: 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，那么将不起作用（看上去多应用与多行）
flex-start: 以交叉轴开始对齐
flex-end: 以交叉轴结束对齐
center: 以交叉轴中线对齐
space-around: 交叉轴剩余空间均匀分布在主轴之间，不包括两侧
space-between: 交叉轴剩余空间均匀分布在主轴之间，包括两侧
stretch: 集体拉伸（默认值）


4. 有哪些属性可以设置在 item 上的？他们分别有哪些属性？分别代表什么意思
order: 
order： 排序，小的靠前
flex-grow: 索取剩余空间，默认为0，如果是1121，那么是2的那个item是其他item的两倍大
flex-shrink: 缩小比例，默认是1
flex-basis: 可以理解成width，比width优先级高，但要注意的是如果有一个为auto，那么另一个的优先度更高
flex: 属性是上面3个的缩写,默认值0 1 auto
align-self: 单独为这个item设置交叉轴的对齐方式，取值和align-items一样

5. 如何使用 flex 实现完全居中
在容器：
justify-content: center;
align-content: center;

6. 如何使用 flex 实现 列表（从左往右排布，可以多行，最后一行左对齐）
如果行数不确定，可以使用足够的空白标签来填补，具体的占位数量是由最多列数的个数决定的。
但要注意的是，空白元素的宽度正常元素一样，但是不声明高度。这样多余的空白标签就会塌缩，且不影响文档流。

例子：
```
        <style>.container {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            margin-right: -10px;
            /* 整个的高度由container里面的list元素撑起来，他们有高度 */
        }

        .list {
            width: 100px;
            height: 100px;
            background-color: skyblue;
            margin: 15px 10px 0 0;
        }

        .container>i {
            width: 100px;
            /* 没有高度，如果超出也不会新开一行，而且是内联元素 */
            margin-right: 10px;
        }
    </style>

    <div class="container">
        <div class="list"></div>
        <i></i>
    </div>
```
一点感想：
总体感觉：

flex弹性盒布局分两个部分，，具体的
container和item。容器管整体布局。item是进行微调。
整体布局又以主轴与交叉轴为主要依靠手段。

container:
主轴部分：
flex-direction 主轴方向
flex-wrap 换行事宜
flex-flow 上面两者的合并，语法糖
justify-content 主轴对齐

交叉轴部分：
align-items 项目们交叉轴对齐(单行使用，多行无效)
align-content 整体在交叉轴上怎么对齐（多行使用）


item：
order： 排序，小的靠前
flex-grow: 索取剩余空间，默认为0，如果是1121，那么是2的那个item是其他item的两倍大
flex-shrink: 缩小比例，基础值是1
flex-basis: 可以理解成width，比width优先级高，但要注意的是如果有一个为auto，那么另一个的优先度更高
flex: 属性是上面3个的缩写
align-self: 单独为这个item设置交叉轴的对齐方式，取值和align-一样


代码题：
1. 请使用 flex 实现圣杯布局，注意：圣杯布局要求优先加载中间部分的内容

2. 请完成骰子的布局

骰子的一面，最多可以放置9个点。
请使用 flex 布局完成 骰子 1-6 点的排布