问答题
1. 什么是类，类有什么用？
类就是将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体，并隐藏它的属性和实现细节，仅对外公布可使用的部分。
抽象的说，类是实现面向对象三大特征封装，继承和多态的基础。
简单点说，类有点像模块化开发，能让数据更安全，拓展更方便，模块性更强，且能够重用。


2. js中如何声明类，
JS中所有的方法都被看做类，因而想要声明一个类可以通过声明函数，再用new调用即可。
或者使用ES6新增的class关键字进行声明。


3. 构造函数允许返回自定义对象吗？如果 return 返回自定义对象会怎么样？
允许。
用new的最后一步就是先判断有无return非空对象，如果有就返回那个非空的对象，如果没有才回返由构造函数生成的对象。


4. 使用 this 赋值成员方法和使用 prototype 声明成员方法的区别是什么？
区别一：
所在位置不一样，用this绑定的，成员方法在每个对象实例中。用prototype绑定的，那么方法在类的原型里。
而且一般来说，绑定到原型里更为安全，用this绑定容易被不小心修改。

区别二：
声明次数不一样。
如果是在prototype中，那么对于这个类的所有对象实例来说，它们共用一个类方法，只有在添加到原型里的时候声明一次。
如果用this绑定的，则每次调用构造函数的时候都会声明一个方法，尽管所有类的方法都是一样的。这会导致效率降低。


5. 请自学js中实现继承的方法，并说说js实现继承的本质是什么？
js实现继承的本质就是通过原型共享静态数据（js函数也是变量，因而可以看做静态变量），然后通过原型链使得子类和父类产生关联和js变量的访问机制
————先查询自己是否拥有，否的话再经过原型链查找，直至找到————实现方法的实现方法的继承。
再通过盗用父类构造函数或者工厂函数等实现非共用变量的继承。



6. 常见的设计模式有哪些？请说出至少5个
工厂模式。
单例模式。
观察者模式。
代理模式。
命令模式。

代码题
1. 请实现 BackTop 这个类，实现点击回到顶部的效果，外部只需要使用如下调用方式即可。
```
var ele = $(".back-top")
new BackTop(ele);
```

答：
```
function BackTop(ele) {
            for (let i = 0; i < ele.length; i++) {
                ele[i].addEventListener("click", () => {
                    window.scrollTo(0, 0);
                })
            }
        }

```




2. 请手动实现 instanceOf(obj,Class) 函数，其行为和js元素提供的 obj instanceof Clazz一致
```
function instance(obj, Class) {
    let proto = obj.__proto__;
    if(!proto) return false;
    if(!proto.constructor) return false;
    if(proto.constructor === Class) return true;
    else return flase;
}

```

3. 请动手实现工厂模式
用工厂模式实现类的继承，且对只对非静态变量进行扩展。
```
function myExtend(Father,varia1,varia2) {
    let son = new Father;
    son.varia1 = varia1;
    son.varia2 = varia2;
    return son;
}
```


4. 请动手实现单例模式
```
        // 教案的方法
        // 将单例以及单例的相关方法都挂载到构造函数，也就是类下面，使用起来像静态遍历和方法。
        // 坏处是不能给单例赋初值，当单例初值少的时候还好，多了可能要手动赋值比较麻烦。
        // 为了解决这一点，对单例的构造函数做了一点小修改，让使用者可以用new的方式生成单例，且能赋予初值。

        function Singleton(name) {
            let constructor = this.__proto__.constructor
            if(!constructor.instance) {
                let instance = {}
                constructor.instance = instance
                instance.name = name;
            }
            return constructor.instance;
        }

        Singleton.getInstance = function () { //挂载到类下面
            if (!this.instance) {
                new Singleton();
            }
            return this.instance;
        }

        a = new Singleton('aaa')
        b = new Singleton('bbb')
        c = new Singleton('ccc')
        console.log(Singleton.getInstance().name) //输出aaa
```



5. 请自学js中实现继承的方法，并实现如下的类的继承关系：人和狗都继承自动物类，动物类有吃和睡两个方法，人和狗对吃和睡都有自己的实现。
```
function Animal() {

}
Animal.prototype.eat = function() {
    console.log("Animal eat food.")
}
Animal.prototype.sleep = function() {
    console.log("Animal sleep.")
}

function Human() {
    Animal.call(this)
}

//继承
Human.prototype.__proto__ = Animal.prototype
Human.prototype.constructor = Human 
//重写
Human.prototype.eat = function() {
    console.log("Human eat food.")

}

Human.prototype.sleep = function() {
    console.log("Human sleep.")

}


function Dog() {
    Animal.call(this)
}

//继承
Dog.prototype.__proto__ = Animal.prototype;
Dog.prototype.constructor = Dog;

//重写
Dog.prototype.eat = function() {
    console.log("Dog eat food.")
}
Dog.prototype.sleep = function() {
    console.log("Dog sleep.")
}
```